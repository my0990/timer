{"version":3,"sources":["logo.svg","components/timer.js","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","Wrapper","props","width","Test","useState","window","innerWidth","setWidth","innerHeight","height","setHeight","radius","Math","min","isStarted","setIsStarted","key","setKey","clickToggle","isReset","setIsReset","resetToggle","isNaN","seconds","audio","pause","setSeconds","Audio","addEventListener","color","className","isPlaying","duration","parseInt","colors","onComplete","size","strokeWidth","remainingTime","play","Button","variant","onClick","placeholder","onChange","e","target","value","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAAe,I,kECSTA,EAAYC,IAAOC,IAAV,qGAQTC,EAAUF,IAAOC,IAAV,gIACH,SAACE,GAAD,OAASA,EAAMC,SACd,SAACD,GAAD,OAASA,EAAMC,SAoHXC,MA3Gf,WAAiB,IAAD,EAIUC,mBAASC,OAAOC,YAJ1B,mBAITJ,EAJS,KAIFK,EAJE,OAKYH,mBAASC,OAAOG,aAL5B,mBAKTC,EALS,KAKDC,EALC,KAMVC,EAASC,KAAKC,IAAIX,EAAMO,GANd,EAOiBL,oBAAS,GAP1B,mBAOTU,EAPS,KAOCC,EAPD,OAQKX,mBAAS,GARd,mBAQTY,EARS,KAQLC,EARK,KAYVC,EAAc,WAElBH,GAAcD,GACXK,GACDC,GAAYD,IAhBA,EAuBaf,oBAAS,GAvBtB,mBAuBTe,EAvBS,KAuBDC,EAvBC,KAwBVC,EAAc,WACdC,MAAMC,KACVH,GAAYD,GACZJ,GAAa,GACbE,EAAOD,EAAI,GACXQ,EAAMC,UA7BQ,EAmCarB,mBAAS,IAnCtB,mBAmCTmB,EAnCS,KAmCDG,EAnCC,KAoCVF,EAAQ,IAAIG,MAAM,aAOtB,OAJFtB,OAAOuB,iBAAiB,UAAS,WAC/BrB,EAASF,OAAOC,YAChBI,EAAUL,OAAOG,gBAGf,cAACX,EAAD,UAEE,cAACG,EAAD,CAASS,OAAQE,EAAQT,MAAOS,EAAQkB,MAAM,MAA9C,SACE,qBAAKC,UAAU,gBAAf,SACA,cAAC,uBAAD,CACEC,UAAWjB,EACXkB,SAAUC,SAASV,GACnBW,OAAQ,CAAC,CAAC,UAAW,KAAO,CAAC,UAAW,KAAO,CAAC,YAChDC,WAAY,iBAAM,EAAC,EAAO,MAC1BC,KAAMzB,EACN0B,YAAa,GANf,SASG,YAAoB,IAAlBC,EAAiB,EAAjBA,cAID,OAAsB,IAAlBA,GAEAd,EAAMe,OAGN,gCACE,qBAAKT,UAAU,QAAf,uBACA,cAACU,EAAA,EAAD,CAAQC,QAAQ,SAAUX,UAAU,WAAWY,QAAS,WAAKrB,KAA7D,uBASJ,8BACCF,EACC,gCAAK,uBAAOwB,YAAY,oCAAWb,UAAU,WAAWc,SAAU,SAACC,GAAKnB,EAAWmB,EAAEC,OAAOC,UAC9F,cAACP,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAAS,WAAKrB,KAAvC,sBACA,gCACA,qBAAKS,UAAU,gBAAf,SAAgCQ,IAC/BxB,EACC,cAAC0B,EAAA,EAAD,CAAQC,QAAQ,SAASX,UAAU,WAAWY,QAAS,WAAKxB,KAA5D,mBACA,cAACsB,EAAA,EAAD,CAAQC,QAAQ,SAASX,UAAU,WAAWY,QAAS,WAAKxB,KAA5D,mBACF,cAACsB,EAAA,EAAD,CAAQC,QAAQ,SAAUX,UAAU,WAAWY,QAAS,WAAKrB,KAA7D,0BA/BCL,UClEAgC,MAXf,WACE,OACE,qBAAKlB,UAAU,MAAf,SACE,cAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,SCEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3b433f1f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React,{useState, useRef, useEffect} from 'react';\r\nimport {CountdownCircleTimer} from \"react-countdown-circle-timer\";\r\nimport './timer.css'\r\nimport styled from 'styled-components';\r\nimport {Button} from 'react-bootstrap'\r\n\r\n\r\n\r\n\r\nconst Container = styled.div`\r\nwidth: 100%;\r\nheight: 100%;\r\nmin-width: 1100px;\r\nbackground: skyblue;\r\n\r\n`\r\n\r\nconst Wrapper = styled.div`\r\nwidth: ${((props)=>props.width)}px;\r\nheight: ${((props)=>props.width)}px;\r\nposition: relative;\r\ntransform: translateX(-50%);\r\nmargin-left:50%;\r\n`\r\n\r\n\r\n\r\n\r\nfunction Test() {\r\n \r\n\r\n\r\nconst [width, setWidth] = useState(window.innerWidth);\r\nconst [height, setHeight] = useState(window.innerHeight);\r\nconst radius = Math.min(width,height)\r\nconst [isStarted,setIsStarted] = useState(false)\r\nconst [key,setKey] = useState(0)\r\n\r\n\r\n//start, pause 버튼\r\nconst clickToggle = () => {\r\n  \r\n  setIsStarted(!isStarted)\r\n  if(isReset){\r\n    setIsReset(!isReset)\r\n    \r\n  }\r\n  \r\n}\r\n\r\n//reset버튼\r\nconst [isReset,setIsReset] = useState(true);\r\nconst resetToggle = () =>{\r\n  if(!isNaN(seconds)){\r\n  setIsReset(!isReset);\r\n  setIsStarted(false)\r\n  setKey(key+1);\r\n  audio.pause();\r\n  \r\n}\r\n}\r\n\r\n//시간설정\r\nconst [seconds,setSeconds] = useState(55)\r\nconst audio = new Audio('timer.mp3');\r\n\r\n\r\nwindow.addEventListener('resize',function(){\r\n  setWidth(window.innerWidth)\r\n  setHeight(window.innerHeight)\r\n})\r\n  return(\r\n    <Container>\r\n       \r\n      <Wrapper height={radius} width={radius} color='red'>\r\n        <div className=\"timer-wrapper\">\r\n        <CountdownCircleTimer\r\n          isPlaying={isStarted}\r\n          duration={parseInt(seconds)}\r\n          colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n          onComplete={() => [false, 1000]}\r\n          size={radius}\r\n          strokeWidth={40}\r\n          key={key}\r\n        >\r\n          {({remainingTime})=>{\r\n            // if (remainingTime === 0) {\r\n            //   return <div>Time's up</div>;\r\n            // }\r\n            if (remainingTime === 0) {\r\n            \r\n                audio.play();\r\n              \r\n              return (\r\n                <div>\r\n                  <div className=\"timer\">Time's up</div>\r\n                  <Button variant=\"danger\"  className=\"btnReset\" onClick={()=>{resetToggle()}}>Reset</Button>\r\n                </div>\r\n              )\r\n\r\n                \r\n\r\n            }\r\n            \r\n            return (\r\n              <div>\r\n              {isReset //리셋상태일때\r\n              ? <div><input placeholder=\"시간(초) 입력\" className=\"btnInput\" onChange={(e)=>{setSeconds(e.target.value)}}/>\r\n              <Button variant=\"danger\" onClick={()=>{resetToggle()}}>Input</Button></div>\r\n            : <div>\r\n              <div className=\"remainingTime\">{remainingTime}</div>\r\n              {isStarted\r\n              ? <Button variant=\"danger\" className=\"btnPause\" onClick={()=>{clickToggle()}}>Pause</Button>\r\n              : <Button variant=\"danger\" className=\"btnStart\" onClick={()=>{clickToggle()}}>Start</Button>}\r\n              <Button variant=\"danger\"  className=\"btnReset\" onClick={()=>{resetToggle()}}>Reset</Button>\r\n              </div> \r\n              \r\n          }</div>)}}\r\n            \r\n          \r\n        </CountdownCircleTimer>\r\n        \r\n       \r\n        </div>\r\n        \r\n      </Wrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Test;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport {Route, Link} from 'react-router-dom';\r\n\r\nimport Timer from './components/timer.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route exact path='/'>\r\n        <Timer />\r\n      </Route>\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}