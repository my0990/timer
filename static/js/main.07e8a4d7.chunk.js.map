{"version":3,"sources":["logo.svg","components/timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","width","window","innerWidth","height","innerHeight","useState","Math","min","lenth","setLenth","isReset","setIsReset","isStart","setIsStart","isPlaying","setIsPlaying","key","setKey","seconds","setSeconds","addEventListener","시작정지","ContainerStyle","background","minWidth","WrapperStyle","margin","style","duration","parseInt","size","colors","remainingTime","onChange","e","target","value","Button","variant","onClick","className","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAAe,I,0CCwGAA,MAhGf,WAEE,IAAMC,EAAQC,OAAOC,WACfC,EAASF,OAAOG,YAHP,EAISC,mBAASC,KAAKC,IAAIP,EAAMG,GAAQ,IAJzC,mBAITK,EAJS,KAIHC,EAJG,OAMaJ,oBAAS,GANtB,mBAMTK,EANS,KAMDC,EANC,OAOaN,oBAAS,GAPtB,mBAOTO,EAPS,KAODC,EAPC,OAQiBR,oBAAS,GAR1B,mBAQTS,EARS,KAQCC,EARD,OASKV,mBAAS,GATd,mBASTW,EATS,KASLC,EATK,OAUaZ,mBAAS,IAVtB,mBAUTa,EAVS,KAUDC,EAVC,KAYflB,OAAOmB,iBAAiB,UAAS,WAAKX,EAASH,KAAKC,IAAIP,EAAMG,GAAQ,OAGtE,IAAMkB,EAAO,WACXN,GAAcD,GACdD,GAAYD,IAeRU,EAAiB,CACrBtB,MAAO,OACPuB,WAAY,OACZC,SAAUhB,GAGNiB,EAAe,CACnBzB,MAAOQ,EACPe,WAAY,QACZG,OAAQ,UAMV,OAGE,qBAAKC,MAAOL,EAAZ,SACE,sBAAKK,MAAOF,EAAZ,UACA,cAAC,uBAAD,CACEX,UAAWA,EACXc,SAAUC,SAASX,GAEnBY,KAAMtB,EACNuB,OAAQ,CACN,CAAC,UAAW,KACZ,CAAC,UAAW,KACZ,CAAC,UAAW,MARhB,SAYM,YAAsB,IAApBC,EAAmB,EAAnBA,cACD,OAAmB,IAAhBA,EACM,4CAGL,8BACFtB,EACC,gCACA,uBAAOuB,SAAU,SAACC,GAAKf,EAAWe,EAAEC,OAAOC,UAC3C,cAACC,EAAA,EAAD,CAAQC,QAAQ,iBAAiBC,QAAS,WA7CtD5B,GAAYD,GACZO,EAAOD,EAAM,IA4CD,6BAEA,sBAAKwB,UAAU,aAAf,UACCR,EACD,sBAAKQ,UAAU,gBAAf,UACC5B,EACA,cAACyB,EAAA,EAAD,CAAQC,QAAQ,iBAAiBE,UAAU,YAAYD,QAAS,WAAKlB,KAArE,0BACF,cAACgB,EAAA,EAAD,CAAQC,QAAQ,iBAAiBE,UAAU,YAAYD,QAAS,WAAKlB,KAArE,0BACC,cAACgB,EAAA,EAAD,CAAQC,QAAQ,iBAAiBE,UAAU,YAAYD,QAAS,WA5D5E5B,GAAYD,GACZO,EAAOD,EAAM,GACbD,GAAa,GACbF,GAAW,IAyDC,0CA1BHG,GAkCL,cAACqB,EAAA,EAAD,CAAQC,QAAQ,iBAAiBC,QAAS,kBAAIE,QAAQC,IAAI,WAAaxB,EAAU,OAAS,CAACF,SAA3F,wBCjFO2B,MAVf,WACE,OACE,sBAAKH,UAAU,MAAf,UAEE,cAAC,EAAD,IACA,oDCCSI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.07e8a4d7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useRef, useState } from \"react\";\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\nimport {Button, Media} from 'react-bootstrap';\r\nimport './timer.css';\r\n\r\n\r\n\r\n\r\nfunction Timer() {\r\n\r\n  const width = window.innerWidth;\r\n  const height = window.innerHeight;\r\n  const[lenth,setLenth] = useState(Math.min(width,height)-20)\r\n\r\n  const[isReset,setIsReset] = useState(true);\r\n  const[isStart,setIsStart] = useState(false);\r\n  const[isPlaying,setIsPlaying] = useState(false);\r\n  const[key,setKey] = useState(0);\r\n  const[seconds,setSeconds] = useState(10);\r\n\r\n  window.addEventListener(\"resize\",()=>{setLenth(Math.min(width,height)-20)})\r\n\r\n  //버튼\r\n  const 시작정지 = () => {\r\n    setIsPlaying(!isPlaying);\r\n    setIsStart(!isStart)\r\n  }\r\n\r\n  const 초기화 = () => {\r\n    setIsReset(!isReset);\r\n    setKey(key + 1);\r\n    setIsPlaying(false);\r\n    setIsStart(false);\r\n  }\r\n\r\n  const 입력 = () => {\r\n    setIsReset(!isReset);\r\n    setKey(key + 1)\r\n  }\r\n\r\n  const ContainerStyle = {\r\n    width: '100%',\r\n    background: 'blue',\r\n    minWidth: lenth\r\n  }\r\n\r\n  const WrapperStyle = {\r\n    width: lenth,\r\n    background: 'white',\r\n    margin: '0 auto',\r\n    \r\n  }\r\n  \r\n\r\n\r\n  return(\r\n   \r\n      \r\n    <div style={ContainerStyle}>\r\n      <div style={WrapperStyle}>\r\n      <CountdownCircleTimer\r\n        isPlaying={isPlaying}\r\n        duration={parseInt(seconds)}\r\n        key={key}\r\n        size={lenth}\r\n        colors={[\r\n          ['#004777', 0.33],\r\n          ['#F7B801', 0.33],\r\n          ['#A30000', 0.33],\r\n        ]}\r\n        \r\n        >\r\n           {({remainingTime}) => {\r\n             if(remainingTime===0){\r\n               return <div>time's up</div>\r\n             } else {\r\n               return (\r\n                 <div>\r\n              {isReset\r\n              ? <div>\r\n                <input onChange={(e)=>{setSeconds(e.target.value)}} ></input>\r\n                <Button variant=\"outline-danger\" onClick={() => {입력()}}>입력</Button>\r\n              </div>\r\n              : <div className='ClockStyle'>\r\n                {remainingTime}\r\n                <div className='BtnGroupStyle'>\r\n                {isStart\r\n                ?<Button variant=\"outline-danger\" className='BtnStyle1' onClick={()=>{시작정지()}}>정지</Button>\r\n              :<Button variant=\"outline-danger\" className='BtnStyle1' onClick={()=>{시작정지()}}>시작</Button>}\r\n                <Button variant=\"outline-danger\" className='BtnStyle2' onClick={()=>{초기화()}} >초기화</Button>\r\n                </div>\r\n                </div> }\r\n              </div>\r\n               )}\r\n           }}\r\n          \r\n        </CountdownCircleTimer>\r\n        <Button variant=\"outline-danger\" onClick={()=>console.log(\"seconds:\" + seconds + \"key:\" + {key})}>test</Button>\r\n        </div>\r\n        </div>\r\n\r\n    \r\n  \r\n  )}\r\nexport default Timer;","import logo from './logo.svg';\nimport './App.css';\nimport Timer from './components/timer.js'\nimport Test from './components/test.js'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Timer />\n      <p>testesdasdfdddt</p>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}