{"version":3,"sources":["logo.svg","components/timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","width","window","innerWidth","height","innerHeight","useState","Math","min","lenth","setLenth","isReset","setIsReset","isStart","isPlaying","setIsPlaying","setKey","addEventListener","styled","div","duration","size","colors","remainingTime","onClick","key","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAAe,I,wCC2FAA,MAlFf,WAEE,IAAMC,EAAQC,OAAOC,WACfC,EAASF,OAAOG,YAHP,EAISC,mBAASC,KAAKC,IAAIP,EAAMG,GAAQ,IAJzC,mBAITK,EAJS,KAIHC,EAJG,OAMaJ,oBAAS,GANtB,mBAMTK,EANS,KAMDC,EANC,OAOaN,oBAAS,GAPtB,mBAOTO,EAPS,aAQiBP,oBAAS,IAR1B,mBAQTQ,EARS,KAQCC,EARD,OASKT,mBAAS,GATd,mBASLU,GATK,WAWfd,OAAOe,iBAAiB,UAAS,WAAKP,EAASH,KAAKC,IAAIP,EAAMG,GAAQ,OAgB/Cc,IAAOC,IAAV,sDAICD,IAAOC,IAAV,qEACPV,GAlBX,IAde,EAoCOH,oBAAS,GApChB,mBAuCf,OAvCe,UA2CX,cAAC,uBAAD,CACEQ,UAAWA,EACXM,SAAU,GAEVC,KAAMZ,EACNa,OAAQ,CACN,CAAC,UAAW,KACZ,CAAC,UAAW,KACZ,CAAC,UAAW,MARhB,SAYM,YACC,OAAmB,IADC,EAAnBC,cAEQ,4CAGL,8BACFZ,EACC,gCACA,0BACA,wBAAQa,QAAS,WAxC7BZ,GAAYD,IAwCA,6BAEA,gCACCE,EACA,kDACF,wBAAQW,QAAS,WAtD5BT,GAAcD,IAsDH,0BACC,wBAAQU,QAAS,WAnD7BZ,GAAYD,GACZK,GAAO,SAAAS,GAAG,OAAIA,EAAM,MAkDR,yCC/DDC,MAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UAEE,cAAC,EAAD,IACA,oDCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.891d893a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useRef, useState } from \"react\";\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\nimport styled from 'styled-components';\r\nimport { Col, Row, Container } from 'react-bootstrap';\r\nimport { right } from '@popperjs/core';\r\n\r\n\r\n\r\n\r\nfunction Timer() {\r\n\r\n  const width = window.innerWidth;\r\n  const height = window.innerHeight;\r\n  const[lenth,setLenth] = useState(Math.min(width,height)-20)\r\n\r\n  const[isReset,setIsReset] = useState(true);\r\n  const[isStart,setIsStart] = useState(false);\r\n  const[isPlaying,setIsPlaying] = useState(true);\r\n  const[key,setKey] = useState(0);\r\n\r\n  window.addEventListener(\"resize\",()=>{setLenth(Math.min(width,height)-20)})\r\n\r\n  //버튼\r\n  const 시작정지 = () => {\r\n    setIsPlaying(!isPlaying)\r\n  }\r\n\r\n  const 초기화 = () => {\r\n    setIsReset(!isReset);\r\n    setKey(key => key + 1)\r\n  }\r\n\r\n  const 입력 = () => {\r\n    setIsReset(!isReset)\r\n  }\r\n\r\n  const TimerContainer = styled.div`\r\n    width: 100%;\r\n    \r\n  `\r\n  const TimerWrapper = styled.div`\r\n    width: ${lenth}px;\r\n    margin: 0 auto;\r\n  `\r\n\r\n  const[test,setTest] = useState(false)\r\n\r\n\r\n  return(\r\n   \r\n      \r\n    \r\n      <CountdownCircleTimer\r\n        isPlaying={isPlaying}\r\n        duration={10}\r\n\r\n        size={lenth}\r\n        colors={[\r\n          ['#004777', 0.33],\r\n          ['#F7B801', 0.33],\r\n          ['#A30000', 0.33],\r\n        ]}\r\n        \r\n        >\r\n           {({remainingTime}) => {\r\n             if(remainingTime===0){\r\n               return <div>time's up</div>\r\n             } else {\r\n               return (\r\n                 <div>\r\n              {isReset\r\n              ? <div>\r\n                <input></input>\r\n                <button onClick={() => {입력()}}>입력</button>\r\n              </div>\r\n              : <div>\r\n                {isStart\r\n                ?<button>정지</button>\r\n              :<button onClick={()=>{시작정지()}}>시작</button>}\r\n                <button onClick={()=>{초기화()}} >초기화</button>\r\n                </div> }\r\n              </div>\r\n               )}\r\n           }}\r\n          \r\n        </CountdownCircleTimer>\r\n       \r\n\r\n    \r\n  \r\n  )}\r\nexport default Timer;","import logo from './logo.svg';\nimport './App.css';\nimport Timer from './components/timer.js'\nimport Test from './components/test.js'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Timer />\n      <p>testesdasdfdddt</p>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}